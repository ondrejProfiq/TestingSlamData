'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncbox = require('asyncbox');

var _appiumRemoteDebugger = require('appium-remote-debugger');

var _deviceLogIosPerformanceLog = require('../device-log/ios-performance-log');

var _deviceLogIosPerformanceLog2 = _interopRequireDefault(_deviceLogIosPerformanceLog);

var _appiumBaseDriver = require('appium-base-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSupport = require('appium-support');

var NATIVE_WIN = 'NATIVE_APP';
var WEBVIEW_WIN = 'WEBVIEW';
var WEBVIEW_BASE = WEBVIEW_WIN + '_';

var commands = {},
    helpers = {},
    extensions = {};

commands.getCurrentContext = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(this.curContext && this.curContext !== NATIVE_WIN)) {
          context$1$0.next = 4;
          break;
        }

        return context$1$0.abrupt('return', '' + WEBVIEW_BASE + this.curContext);

      case 4:
        return context$1$0.abrupt('return', NATIVE_WIN);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getContexts = function callee$0$0() {
  var contexts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Getting list of available contexts');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getContextsAndViews(false));

      case 3:
        contexts = context$1$0.sent;
        return context$1$0.abrupt('return', contexts.map(function (context) {
          return context.id.toString();
        }));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setContext = function callee$0$0(name, callback, skipReadyCheck) {
  var alreadyInContext, contextId, _$map, _$map2, appIdKey, pageIdKey;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        alreadyInContext = function alreadyInContext(desired, current) {
          return desired === current || desired === null && current === NATIVE_WIN || desired === NATIVE_WIN && current === null;
        };

        _logger2['default'].debug('Attempting to set context to \'' + name + '\'');

        if (!alreadyInContext(name, this.curContext)) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 33;
        break;

      case 5:
        if (!(name === NATIVE_WIN || name === null)) {
          context$1$0.next = 10;
          break;
        }

        // switching into the native context
        this.curContext = null;
        if (this.isRealDevice()) {
          this.remote.disconnect();
        }
        context$1$0.next = 33;
        break;

      case 10:
        if (!_lodash2['default'].isUndefined(this.contexts)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.getContexts());

      case 13:
        contextId = name.replace(WEBVIEW_BASE, '');

        if (contextId === '') {
          // allow user to pass in "WEBVIEW" without an index
          // the second context will be the first webview as
          // the first is always NATIVE_APP
          contextId = this.contexts[1];
        }

        if (_lodash2['default'].includes(this.contexts, contextId)) {
          context$1$0.next = 17;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchContextError();

      case 17:
        if (!this.isRealDevice()) {
          context$1$0.next = 26;
          break;
        }

        if (!this.remote) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.remote.disconnect());

      case 21:
        this.curContext = contextId;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.remote.connect(contextId));

      case 24:
        context$1$0.next = 33;
        break;

      case 26:
        _$map = _lodash2['default'].map(contextId.split('.'), function (id) {
          return parseInt(id, 10);
        });
        _$map2 = _slicedToArray(_$map, 2);
        appIdKey = _$map2[0];
        pageIdKey = _$map2[1];
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap(this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck));

      case 32:
        this.curContext = contextId;

      case 33:

        // attempt to start performance logging, if requested
        if (this.opts.enablePerformanceLogging && this.remote) {
          _logger2['default'].debug('Starting performance log on \'' + this.curContext + '\'');
          this.logs.performance = new _deviceLogIosPerformanceLog2['default'](this.remote);
          this.logs.performance.startCapture();
        }

      case 34:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowHandle = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotImplementedError();

      case 2:
        return context$1$0.abrupt('return', this.curContext.toString());

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getWindowHandles = function callee$0$0() {
  var pageArray, idArray;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotImplementedError();

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.listWebFrames());

      case 4:
        pageArray = context$1$0.sent;

        this.windowHandleCache = _lodash2['default'].map(pageArray, this.massagePage);
        idArray = _lodash2['default'].map(this.windowHandleCache, 'id');

        // since we use this.contexts to manage selecting debugger pages, make
        // sure it gets populated even if someone did not use the
        // getContexts method
        if (!this.contexts) {
          this.contexts = idArray;
        }
        return context$1$0.abrupt('return', _lodash2['default'].map(idArray, function (id) {
          return id.toString();
        }));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setWindow = function callee$0$0(name, skipReadyCheck) {
  var pageIdKey;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _appiumBaseDriver.errors.NotImplementedError();

      case 2:
        if (_lodash2['default'].includes(_lodash2['default'].map(this.windowHandleCache, 'id'), name)) {
          context$1$0.next = 4;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchWindowError();

      case 4:
        pageIdKey = parseInt(name, 10);

        if (this.isRealDevice()) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.remote.selectPage(pageIdKey, skipReadyCheck));

      case 8:
        this.curContext = this.curWindowHandle = name;
        context$1$0.next = 24;
        break;

      case 11:
        if (!(name === this.curWindowHandle)) {
          context$1$0.next = 15;
          break;
        }

        _logger2['default'].debug('Remote debugger is already connected to window \'' + name + '\'');
        context$1$0.next = 24;
        break;

      case 15:
        if (_lodash2['default'].includes(_lodash2['default'].map(this.windowHandleCache, 'id'), name)) {
          context$1$0.next = 19;
          break;
        }

        throw new _appiumBaseDriver.errors.NoSuchWindowError();

      case 19:
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.remote.disconnect());

      case 21:
        this.curContext = this.curWindowHandle = name;
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(this.remote.connect(name));

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.webContextIndex = function () {
  return this.curContext.replace(WEBVIEW_BASE, '') - 1;
};

extensions.initAutoWebview = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.opts.autoWebview) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].debug('Setting auto webview');
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.navToInitialWebview(this));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.getContextsAndViews = function callee$0$0() {
  var useUrl = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

  var webviews, ctxs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, view;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving contexts and views');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.listWebFrames(useUrl));

      case 3:
        webviews = context$1$0.sent;
        ctxs = [{ id: NATIVE_WIN }];

        this.contexts = [NATIVE_WIN];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 9;
        for (_iterator = _getIterator(webviews); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          view = _step.value;

          ctxs.push({ id: '' + WEBVIEW_BASE + view.id, view: view });
          this.contexts.push(view.id.toString());
        }
        context$1$0.next = 17;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](9);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 17:
        context$1$0.prev = 17;
        context$1$0.prev = 18;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 20:
        context$1$0.prev = 20;

        if (!_didIteratorError) {
          context$1$0.next = 23;
          break;
        }

        throw _iteratorError;

      case 23:
        return context$1$0.finish(20);

      case 24:
        return context$1$0.finish(17);

      case 25:
        return context$1$0.abrupt('return', ctxs);

      case 26:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 13, 17, 25], [18,, 20, 24]]);
};

extensions.listWebFrames = function callee$0$0() {
  var useUrl = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
  var currentUrl, pageArray, appInfo, tryClosingAlert;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.opts.bundleId) {
          _logger2['default'].errorAndThrow('Cannot enter web frame without a bundle ID');
        }

        useUrl = useUrl && !!this.getCurrentUrl();
        /* jshint ignore:start */
        _logger2['default'].debug('Selecting by url: ' + useUrl + ' ' + (useUrl ? '(expected url: \'' + this.getCurrentUrl() + '\')' : ''));
        /* jshint ignore:end */

        currentUrl = useUrl ? this.getCurrentUrl() : undefined;
        pageArray = undefined;

        if (!(this.isRealDevice() && this.remote && this.opts.bundleId)) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.remote.pageArrayFromJson());

      case 8:
        pageArray = context$1$0.sent;
        context$1$0.next = 54;
        break;

      case 11:
        if (!(this.remote && this.remote.appIdKey)) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries));

      case 14:
        pageArray = context$1$0.sent;
        context$1$0.next = 54;
        break;

      case 17:
        if (!this.isRealDevice()) {
          context$1$0.next = 34;
          break;
        }

        context$1$0.prev = 18;

        this.remote = new _appiumRemoteDebugger.WebKitRemoteDebugger({
          port: this.opts.webkitDebugProxyPort,
          webkitResponseTimeout: this.opts.webkitResponseTimeout
        });
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.remote.pageArrayFromJson());

      case 22:
        pageArray = context$1$0.sent;
        context$1$0.next = 32;
        break;

      case 25:
        context$1$0.prev = 25;
        context$1$0.t0 = context$1$0['catch'](18);

        if (_lodash2['default'].includes(context$1$0.t0.message, 'connect ECONNREFUSED')) {
          context$1$0.next = 29;
          break;
        }

        throw context$1$0.t0;

      case 29:

        _logger2['default'].warn('Attempted to get a list of webview contexts but could not connect to ' + 'ios-webkit-debug-proxy. If you expect to find webviews, please ensure ' + 'that the proxy is running and accessible');
        this.remote = null;
        pageArray = [];

      case 32:
        context$1$0.next = 54;
        break;

      case 34:
        // simulator, and not connected
        this.remote = new _appiumRemoteDebugger.RemoteDebugger({
          bundleId: this.opts.bundleId,
          useNewSafari: this.useNewSafari(),
          pageLoadMs: this.pageLoadMs,
          platformVersion: this.opts.platformVersion
        });

        context$1$0.next = 37;
        return _regeneratorRuntime.awrap(this.remote.connect());

      case 37:
        appInfo = context$1$0.sent;

        if (appInfo) {
          context$1$0.next = 41;
          break;
        }

        _logger2['default'].debug('Unable to connect to the remote debugger.');
        return context$1$0.abrupt('return', []);

      case 41:
        context$1$0.next = 43;
        return _regeneratorRuntime.awrap(this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries));

      case 43:
        pageArray = context$1$0.sent;

        this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));

        tryClosingAlert = function tryClosingAlert() {
          var didDismiss;
          return _regeneratorRuntime.async(function tryClosingAlert$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.closeAlertBeforeTest());

              case 2:
                didDismiss = context$2$0.sent;

                if (didDismiss) {
                  context$2$0.next = 5;
                  break;
                }

                throw new Error('Close alert failed. Retry.');

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.prev = 46;
        context$1$0.next = 49;
        return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(3, 4000, tryClosingAlert));

      case 49:
        context$1$0.next = 54;
        break;

      case 51:
        context$1$0.prev = 51;
        context$1$0.t1 = context$1$0['catch'](46);

        // if the loop to close alerts failed to dismiss, ignore,
        // otherwise log and throw the error
        if (context$1$0.t1.message !== 'Close alert failed. Retry.') {
          _logger2['default'].errorAndThrow(context$1$0.t1);
        }

      case 54:

        if (pageArray.length === 0) {
          // we have no web frames, but continue anyway
          _logger2['default'].debug('No web frames found.');
        }
        return context$1$0.abrupt('return', pageArray);

      case 56:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 25], [46, 51]]);
};

extensions.onPageChange = function callee$0$0(pageChangeNotification) {
  var appIdKey, pageArray, newIds, newPages, keyId, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, page, id, contextId, newPage, _curContext$split, _curContext$split2, curAppIdKey, curPageIdKey, needsPageLoad;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Remote debugger notified us of a new page listing: ' + JSON.stringify(pageChangeNotification));

        if (!this.selectingNewPage) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].debug('We are in the middle of selecting a page, ignoring');
        return context$1$0.abrupt('return');

      case 4:
        if (this.remote.appIdKey) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].debug('We have not yet connected, ignoring');
        return context$1$0.abrupt('return');

      case 7:
        appIdKey = pageChangeNotification.appIdKey;
        pageArray = pageChangeNotification.pageArray;
        newIds = [];
        newPages = [];
        keyId = null;
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 15;

        for (_iterator2 = _getIterator(pageArray); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          page = _step2.value;
          id = page.id.toString();

          newIds.push(id);
          if (page.isKey) {
            keyId = id;
          }
          contextId = appIdKey + '.' + id;

          if (!_lodash2['default'].includes(this.contexts, contextId)) {
            newPages.push(id);
            this.contexts.push(contextId);
          }
        }

        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](15);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError2) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError2;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        if (!keyId) {
          // if there is no key id, pull the first id from the page array and use that
          // as a stand in
          _logger2['default'].debug('No key id found. Choosing first id from page array');
          keyId = newIds[0] || null;
        }

        newPage = null;

        if (!(this.curContext === null)) {
          context$1$0.next = 37;
          break;
        }

        _logger2['default'].debug('We do not appear to have window set yet, ignoring');
        context$1$0.next = 69;
        break;

      case 37:
        _curContext$split = this.curContext.split('.');
        _curContext$split2 = _slicedToArray(_curContext$split, 2);
        curAppIdKey = _curContext$split2[0];
        curPageIdKey = _curContext$split2[1];

        if (!(curAppIdKey !== appIdKey)) {
          context$1$0.next = 44;
          break;
        }

        _logger2['default'].debug('Page change not referring to currently selected app, ignoring.');
        return context$1$0.abrupt('return');

      case 44:
        if (!newPages.length) {
          context$1$0.next = 49;
          break;
        }

        newPage = _lodash2['default'].last(newPages);
        _logger2['default'].debug('We have new pages, going to select page \'' + newPage + '\'');
        context$1$0.next = 69;
        break;

      case 49:
        if (_lodash2['default'].includes(newIds, curPageIdKey)) {
          context$1$0.next = 62;
          break;
        }

        _logger2['default'].debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');

        if (!(keyId !== null)) {
          context$1$0.next = 55;
          break;
        }

        _logger2['default'].debug('Debugger already selected page \'' + keyId + '\', ' + 'confirming that choice.');
        context$1$0.next = 58;
        break;

      case 55:
        _logger2['default'].error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');
        this.setCurrentUrl(undefined);
        return context$1$0.abrupt('return');

      case 58:
        this.curContext = appIdKey + '.' + keyId;
        newPage = keyId;
        context$1$0.next = 69;
        break;

      case 62:
        _logger2['default'].debug('Checking if page needs to load');
        // If a window navigates to an anchor it doesn't always fire a page
        // callback event. Let's check if we wound up in such a situation.

        needsPageLoad = (function () {
          var item = function item(arr) {
            return _lodash2['default'].filter(arr, function (obj) {
              return obj.id === _this2.curContext;
            })[0];
          };

          // need to map the page ids to context ids
          var contextArray = _lodash2['default'].map(pageArray, function (arr) {
            return { id: appIdKey + '.' + arr.id };
          });
          return !_lodash2['default'].isEqual(item(_this2.contexts), item(contextArray));
        })();

        if (!needsPageLoad) {
          context$1$0.next = 68;
          break;
        }

        _logger2['default'].debug('Page load needed. Loading.');
        context$1$0.next = 68;
        return _regeneratorRuntime.awrap(this.remote.pageLoad());

      case 68:

        _logger2['default'].debug('New page listing is same as old, doing nothing');

      case 69:

        // make sure that the page listing isn't indicating a redirect
        if (_appiumSupport.util.hasValue(this.curContext)) {
          (function () {
            var currentPageId = parseInt(_lodash2['default'].last(_this2.curContext.split('.')), 10);
            var page = _lodash2['default'].find(pageArray, function (p) {
              return parseInt(p.id, 10) === currentPageId;
            });
            if (page && page.url !== _this2.getCurrentUrl()) {
              _logger2['default'].debug('Redirected from \'' + _this2.getCurrentUrl() + '\' to \'' + page.url + '\'');
              _this2.setCurrentUrl(page.url);
            }
          })();
        }

        if (!_appiumSupport.util.hasValue(newPage)) {
          context$1$0.next = 76;
          break;
        }

        this.selectingNewPage = true;
        context$1$0.next = 74;
        return _regeneratorRuntime.awrap(this.remote.selectPage(appIdKey, parseInt(newPage, 10)));

      case 74:
        this.selectingNewPage = false;
        this.curContext = appIdKey + '.' + newPage;

      case 76:
        this.windowHandleCache = _lodash2['default'].map(pageArray, this.massagePage);

      case 77:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[15, 19, 23, 31], [24,, 26, 30]]);
};

extensions.getLatestWebviewContextForTitle = function callee$0$0(regExp) {
  var contexts, matchingCtx, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, ctx;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getContextsAndViews());

      case 2:
        contexts = context$1$0.sent;
        matchingCtx = undefined;
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 7;
        _iterator3 = _getIterator(contexts);

      case 9:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 17;
          break;
        }

        ctx = _step3.value;

        if (!(ctx.view && ((ctx.view.title || '').match(regExp) || (ctx.view.url || '').match(regExp)))) {
          context$1$0.next = 14;
          break;
        }

        if (ctx.view.url !== 'about:blank') {
          matchingCtx = ctx;
        } else {
          // in the cases of Xcode < 5 (i.e., iOS SDK Version less than 7)
          // iOS 7.1, iOS 9.0 & iOS 9.1 in a webview (not in Safari)
          // we can have the url be `about:blank`
          if (parseFloat(this.iosSdkVersion) < 7 || parseFloat(this.iosSdkVersion) >= 9 || this.opts.platformVersion === '7.1' && this.opts.app && this.opts.app.toLowerCase() !== 'safari') {
            matchingCtx = ctx;
          }
        }
        return context$1$0.abrupt('break', 17);

      case 14:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 9;
        break;

      case 17:
        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](7);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError3) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError3;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        return context$1$0.abrupt('return', matchingCtx ? matchingCtx.id : undefined);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 19, 23, 31], [24,, 26, 30]]);
};

// Right now we don't necessarily wait for webview
// and frame to load, which leads to race conditions and flakiness,
// let's see if we can transition to something better
extensions.useNewSafari = function () {
  return parseFloat(this.iosSdkVersion) >= 8.1 && parseFloat(this.opts.platformVersion) >= 8.1 && !this.isRealDevice() && this.opts.safari;
};

extensions.navToInitialWebview = function callee$0$0() {
  var timeout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        timeout = 0;

        if (this.isRealDevice()) {
          timeout = 3000;
          _logger2['default'].debug('Waiting for ' + timeout + ' ms before navigating to view.');
        }
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(timeout));

      case 4:
        if (!this.useNewSafari()) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.typeAndNavToUrl());

      case 7:
        context$1$0.next = 16;
        break;

      case 9:
        if (!(parseInt(this.iosSdkVersion, 10) >= 7 && !this.isRealDevice() && this.opts.safari)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.navToViewThroughFavorites());

      case 12:
        context$1$0.next = 16;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.navToViewWithTitle(/.*/));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function openNewPage() {
  var newPageButton;
  return _regeneratorRuntime.async(function openNewPage$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.findElement('xpath', "//UIAButton[contains(@name,'New page')]"));

      case 2:
        newPageButton = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.nativeTap(newPageButton.ELEMENT));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

extensions.typeAndNavToUrl = function callee$0$0() {
  var address, tries, MAX_TRIES, navigate;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this4 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        address = this.opts.address ? this.opts.address : '127.0.0.1';

        this.setCurrentUrl(this.caps.safariInitialUrl || 'http://' + address + ':' + this.opts.port + '/welcome');

        tries = 0;
        MAX_TRIES = 2;

        navigate = function navigate() {
          var oldImpWait, el, _el;

          return _regeneratorRuntime.async(function navigate$(context$2$0) {
            var _this3 = this;

            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                oldImpWait = this.implicitWaitMs;

                this.implicitWaitMs = 7000;

                // find the url bar, and tap on it. retry to make sure we don't try
                // too soon while the view is still loading
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(3, 1000, function callee$2$0() {
                  return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                    while (1) switch (context$3$0.prev = context$3$0.next) {
                      case 0:
                        context$3$0.next = 2;
                        return _regeneratorRuntime.awrap(this.findElement('accessibility id', 'URL'));

                      case 2:
                        return context$3$0.abrupt('return', context$3$0.sent);

                      case 3:
                      case 'end':
                        return context$3$0.stop();
                    }
                  }, null, _this3);
                }));

              case 4:
                el = context$2$0.sent;

                this.implicitWaitMs = oldImpWait;

                context$2$0.prev = 6;
                context$2$0.next = 9;
                return _regeneratorRuntime.awrap(this.nativeTap(el.ELEMENT));

              case 9:
                context$2$0.next = 24;
                break;

              case 11:
                context$2$0.prev = 11;
                context$2$0.t0 = context$2$0['catch'](6);

                if (!_lodash2['default'].includes(context$2$0.t0.message, 'could not be tapped')) {
                  context$2$0.next = 23;
                  break;
                }

                if (!(tries++ >= MAX_TRIES)) {
                  context$2$0.next = 16;
                  break;
                }

                throw context$2$0.t0;

              case 16:
                context$2$0.next = 18;
                return _regeneratorRuntime.awrap(openNewPage());

              case 18:
                context$2$0.next = 20;
                return _regeneratorRuntime.awrap(navigate());

              case 20:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 23:
                throw context$2$0.t0;

              case 24:
                context$2$0.prev = 24;
                context$2$0.next = 27;
                return _regeneratorRuntime.awrap(this.findElement('class name', 'UIATextField'));

              case 27:
                _el = context$2$0.sent;
                context$2$0.next = 30;
                return _regeneratorRuntime.awrap(this.setValueImmediate(this.getCurrentUrl(), _el));

              case 30:
                context$2$0.next = 39;
                break;

              case 32:
                context$2$0.prev = 32;
                context$2$0.t1 = context$2$0['catch'](24);

                if (!(tries++ >= MAX_TRIES)) {
                  context$2$0.next = 36;
                  break;
                }

                throw context$2$0.t1;

              case 36:
                context$2$0.next = 38;
                return _regeneratorRuntime.awrap(navigate());

              case 38:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 39:
                context$2$0.prev = 39;
                context$2$0.next = 42;
                return _regeneratorRuntime.awrap(this.findElement('accessibility id', 'Go'));

              case 42:
                el = context$2$0.sent;
                context$2$0.next = 45;
                return _regeneratorRuntime.awrap(this.nativeTap(el.ELEMENT));

              case 45:
                context$2$0.next = 51;
                break;

              case 47:
                context$2$0.prev = 47;
                context$2$0.t2 = context$2$0['catch'](39);

                if (_lodash2['default'].includes(context$2$0.t2.message, 'could not be tapped')) {
                  _logger2['default'].error('Unable to submit URL because \'Go\' button could not be tapped. ' + 'Please make sure your keyboard is toggled on.');
                }
                throw context$2$0.t2;

              case 51:
                context$2$0.next = 53;
                return _regeneratorRuntime.awrap(this.navToViewWithTitle(undefined, new RegExp(this.getCurrentUrl(), 'i')));

              case 53:
                context$2$0.next = 55;
                return _regeneratorRuntime.awrap(this.remote.pageUnload());

              case 55:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this4, [[6, 11], [24, 32], [39, 47]]);
        };

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(navigate());

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.navToViewThroughFavorites = function callee$0$0() {
  var oldImpWait, el, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('We are on iOS7+ simulator: clicking apple button to get into a webview');
        oldImpWait = this.implicitWaitMs;

        this.implicitWaitMs = 7000; // wait 7s for apple button to exist

        el = undefined;
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.findElement('xpath', '//UIAScrollView[1]/UIAButton[1]'));

      case 7:
        el = context$1$0.sent;
        context$1$0.next = 18;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](4);
        msg = 'Could not find button to click to get into webview. ' + 'Proceeding on the assumption we have a working one.';

        _logger2['default'].error(msg);
        this.implicitWaitMs = oldImpWait;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this.navToViewWithTitle(/.*/i));

      case 17:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 18:
        this.implicitWaitMs = oldImpWait;
        context$1$0.prev = 19;
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(this.nativeTap(el.ELEMENT));

      case 22:
        context$1$0.next = 28;
        break;

      case 24:
        context$1$0.prev = 24;
        context$1$0.t1 = context$1$0['catch'](19);
        msg = 'Could not click button to get into webview. ' + 'Proceeding on the assumption we have a working one.';

        _logger2['default'].error(msg);

      case 28:
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(this.navToViewWithTitle(/apple/i));

      case 30:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 10], [19, 24]]);
};

extensions.navToViewWithTitle = function callee$0$0(titleRegex, urlRegExp) {
  var start, spinTime, spinHandles;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this5 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Navigating to most recently opened webview');
        start = Date.now();
        spinTime = 500;

        spinHandles = function spinHandles() {
          var res, latestWindow, element;
          return _regeneratorRuntime.async(function spinHandles$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                res = undefined;
                context$2$0.prev = 1;
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(this.getLatestWebviewContextForTitle(titleRegex || urlRegExp));

              case 4:
                res = context$2$0.sent;
                context$2$0.next = 12;
                break;

              case 7:
                context$2$0.prev = 7;
                context$2$0.t0 = context$2$0['catch'](1);

                if (!(context$2$0.t0.message.indexOf('Could not connect to a valid app after') === -1)) {
                  context$2$0.next = 11;
                  break;
                }

                throw new Error('Could not navigate to webview! Err: ' + context$2$0.t0.message);

              case 11:
                _logger2['default'].debug('Could not navigate to webview. Retrying if possible.');

              case 12:
                if (!res) {
                  context$2$0.next = 20;
                  break;
                }

                latestWindow = res;

                _logger2['default'].debug('Picking webview \'' + latestWindow + '\'');
                context$2$0.next = 17;
                return _regeneratorRuntime.awrap(this.setContext(latestWindow));

              case 17:
                context$2$0.next = 19;
                return _regeneratorRuntime.awrap(this.remote.cancelPageLoad());

              case 19:
                return context$2$0.abrupt('return');

              case 20:
                if (!(Date.now() - start >= 90000)) {
                  context$2$0.next = 22;
                  break;
                }

                throw new Error('Could not navigate to webview; there are none!');

              case 22:

                _logger2['default'].warn("Could not find any webviews yet, refreshing/retrying");

                if (!(this.isRealDevice() || !this.opts.safari)) {
                  context$2$0.next = 29;
                  break;
                }

                context$2$0.next = 26;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(spinTime));

              case 26:
                context$2$0.next = 28;
                return _regeneratorRuntime.awrap(spinHandles());

              case 28:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 29:
                element = undefined;
                context$2$0.prev = 30;

                _logger2['default'].debug('Finding and tapping reload button');
                context$2$0.next = 34;
                return _regeneratorRuntime.awrap(this.findUIElementOrElements('accessibility id', 'ReloadButton', '', false));

              case 34:
                element = context$2$0.sent;
                context$2$0.next = 37;
                return _regeneratorRuntime.awrap(this.nativeTap(element.ELEMENT));

              case 37:
                context$2$0.next = 45;
                break;

              case 39:
                context$2$0.prev = 39;
                context$2$0.t1 = context$2$0['catch'](30);

                _logger2['default'].warn('Error finding and tapping reload button: ' + context$2$0.t1.message);
                _logger2['default'].warn('Retrying.');
                context$2$0.next = 45;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(spinTime));

              case 45:
                context$2$0.next = 47;
                return _regeneratorRuntime.awrap(spinHandles());

              case 47:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 48:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this5, [[1, 7], [30, 39]]);
        };

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(spinHandles());

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.closeAlertBeforeTest = function callee$0$0() {
  var present;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.alertIsPresent()'));

      case 2:
        present = context$1$0.sent;

        if (present) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 5:

        _logger2['default'].debug('Alert present before starting test, let us banish it');
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.dismissAlert()'));

      case 8:
        _logger2['default'].debug('Alert banished!');
        return context$1$0.abrupt('return', true);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.stopRemote = function callee$0$0() {
  var closeWindowBeforeDisconnecting = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.remote) {
          _logger2['default'].errorAndThrow('Tried to leave a web frame but were not in one');
        }

        if (!closeWindowBeforeDisconnecting) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.closeWindow());

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.remote.disconnect());

      case 6:
        this.curContext = null;
        this.curWebFrames = [];
        this.curWebCoords = null;
        this.remote = null;

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.isWebContext = function () {
  return !!this.curContext && this.curContext !== NATIVE_WIN;
};

helpers.setCurrentUrl = function (url) {
  this._currentUrl = url;
};

helpers.getCurrentUrl = function () {
  return this._currentUrl;
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports.NATIVE_WIN = NATIVE_WIN;
exports.WEBVIEW_WIN = WEBVIEW_WIN;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
exports['default'] = extensions;

// already in the named context, no need to do anything

// switching into a webview context

// if contexts have not already been retrieved, get them

// `contextId` will be in the form of `appId.pageId` in this case

// real device, and already connected

// simulator, and already connected

// real device, and not connected

// it is reasonable to expect that this might be called when there is no
// webkit remote debugger to connect to

// generally this means that Safari is in page viewing mode
// so try to open a new page and then redo the navigation

// get the last address element and set the url

// this is flakey on certain systems so we retry until we get something
// ios sims: safari opens but the text field can't be found

// make it happen

// wait for page to finish loading.

// no webview was found

// too slow, get out

// on a real device, when not using Safari, we just want to try again

// find the reload button and tap it, if possible

// try it all again
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7Ozt3QkFDUixVQUFVOzs7O3dCQUNNLFVBQVU7O29DQUNhLHdCQUF3Qjs7MENBQy9DLG1DQUFtQzs7OztnQ0FDMUMsb0JBQW9COztzQkFDeEIsV0FBVzs7Ozs2QkFDVCxnQkFBZ0I7O0FBR3JDLElBQU0sVUFBVSxHQUFHLFlBQVksQ0FBQztBQUNoQyxJQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDOUIsSUFBTSxZQUFZLEdBQU0sV0FBVyxNQUFHLENBQUM7O0FBRXZDLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELFFBQVEsQ0FBQyxpQkFBaUIsR0FBRzs7OztjQUN2QixJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFBOzs7OztpREFDekMsWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVOzs7NENBRWpDLFVBQVU7Ozs7Ozs7Q0FFcEIsQ0FBQzs7QUFFRixRQUFRLENBQUMsV0FBVyxHQUFHO01BRWpCLFFBQVE7Ozs7QUFEWiw0QkFBTyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQzs7eUNBQzlCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUM7OztBQUFoRCxnQkFBUTs0Q0FDTCxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUMsT0FBTztpQkFBSyxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRTtTQUFBLENBQUM7Ozs7Ozs7Q0FDeEQsQ0FBQzs7QUFFRixRQUFRLENBQUMsVUFBVSxHQUFHLG9CQUFnQixJQUFJLEVBQUUsUUFBUSxFQUFFLGNBQWM7TUFDekQsZ0JBQWdCLEVBdUJuQixTQUFTLGlCQW1CTixRQUFRLEVBQUUsU0FBUzs7Ozs7QUExQ25CLHdCQUFnQixZQUFoQixnQkFBZ0IsQ0FB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YUFFRyw4QkFBOEI7Ozs7Ozt5Q0FDMUIsSUFBSSxDQUFDLFdBQVcsRUFBRTs7Ozt5Q0FFcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7OztBQUM5QixZQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN2QixZQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztBQUN2QixZQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUN6QixZQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzs7Ozs7OztDQUNwQixDQUFDOztBQUVGLE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWTtBQUNqQyxTQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDO0NBQzVELENBQUM7O0FBRUYsT0FBTyxDQUFDLGFBQWEsR0FBRyxVQUFVLEdBQUcsRUFBRTtBQUNyQyxNQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztDQUN4QixDQUFDOztBQUVGLE9BQU8sQ0FBQyxhQUFhLEdBQUcsWUFBWTtBQUNsQyxTQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7Q0FDekIsQ0FBQzs7QUFHRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztRQUFFLFVBQVUsR0FBVixVQUFVO1FBQUUsV0FBVyxHQUFYLFdBQVc7UUFBRSxZQUFZLEdBQVosWUFBWTtxQkFDbEQsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvY29udGV4dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgUmVtb3RlRGVidWdnZXIsIFdlYktpdFJlbW90ZURlYnVnZ2VyIH0gZnJvbSAnYXBwaXVtLXJlbW90ZS1kZWJ1Z2dlcic7XG5pbXBvcnQgSU9TUGVyZm9ybWFuY2VMb2cgZnJvbSAnLi4vZGV2aWNlLWxvZy9pb3MtcGVyZm9ybWFuY2UtbG9nJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IE5BVElWRV9XSU4gPSAnTkFUSVZFX0FQUCc7XG5jb25zdCBXRUJWSUVXX1dJTiA9ICdXRUJWSUVXJztcbmNvbnN0IFdFQlZJRVdfQkFTRSA9IGAke1dFQlZJRVdfV0lOfV9gO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldEN1cnJlbnRDb250ZXh0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jdXJDb250ZXh0ICYmIHRoaXMuY3VyQ29udGV4dCAhPT0gTkFUSVZFX1dJTikge1xuICAgIHJldHVybiBgJHtXRUJWSUVXX0JBU0V9JHt0aGlzLmN1ckNvbnRleHR9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTkFUSVZFX1dJTjtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0Q29udGV4dHMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxvZ2dlci5kZWJ1ZygnR2V0dGluZyBsaXN0IG9mIGF2YWlsYWJsZSBjb250ZXh0cycpO1xuICBsZXQgY29udGV4dHMgPSBhd2FpdCB0aGlzLmdldENvbnRleHRzQW5kVmlld3MoZmFsc2UpO1xuICByZXR1cm4gY29udGV4dHMubWFwKChjb250ZXh0KSA9PiBjb250ZXh0LmlkLnRvU3RyaW5nKCkpO1xufTtcblxuY29tbWFuZHMuc2V0Q29udGV4dCA9IGFzeW5jIGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgc2tpcFJlYWR5Q2hlY2spIHtcbiAgZnVuY3Rpb24gYWxyZWFkeUluQ29udGV4dCAoZGVzaXJlZCwgY3VycmVudCkge1xuICAgIHJldHVybiAoZGVzaXJlZCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAoZGVzaXJlZCA9PT0gbnVsbCAmJiBjdXJyZW50ID09PSBOQVRJVkVfV0lOKSB8fFxuICAgICAgICAgICAoZGVzaXJlZCA9PT0gTkFUSVZFX1dJTiAmJiBjdXJyZW50ID09PSBudWxsKSk7XG4gIH1cblxuICBsb2dnZXIuZGVidWcoYEF0dGVtcHRpbmcgdG8gc2V0IGNvbnRleHQgdG8gJyR7bmFtZX0nYCk7XG4gIGlmIChhbHJlYWR5SW5Db250ZXh0KG5hbWUsIHRoaXMuY3VyQ29udGV4dCkpIHtcbiAgICAvLyBhbHJlYWR5IGluIHRoZSBuYW1lZCBjb250ZXh0LCBubyBuZWVkIHRvIGRvIGFueXRoaW5nXG4gIH0gZWxzZSBpZiAobmFtZSA9PT0gTkFUSVZFX1dJTiB8fCBuYW1lID09PSBudWxsKSB7XG4gICAgLy8gc3dpdGNoaW5nIGludG8gdGhlIG5hdGl2ZSBjb250ZXh0XG4gICAgdGhpcy5jdXJDb250ZXh0ID0gbnVsbDtcbiAgICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgICAgdGhpcy5yZW1vdGUuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBzd2l0Y2hpbmcgaW50byBhIHdlYnZpZXcgY29udGV4dFxuXG4gICAgLy8gaWYgY29udGV4dHMgaGF2ZSBub3QgYWxyZWFkeSBiZWVuIHJldHJpZXZlZCwgZ2V0IHRoZW1cbiAgICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLmNvbnRleHRzKSkge1xuICAgICAgYXdhaXQgdGhpcy5nZXRDb250ZXh0cygpO1xuICAgIH1cblxuICAgIGxldCBjb250ZXh0SWQgPSBuYW1lLnJlcGxhY2UoV0VCVklFV19CQVNFLCAnJyk7XG4gICAgaWYgKGNvbnRleHRJZCA9PT0gJycpIHtcbiAgICAgIC8vIGFsbG93IHVzZXIgdG8gcGFzcyBpbiBcIldFQlZJRVdcIiB3aXRob3V0IGFuIGluZGV4XG4gICAgICAvLyB0aGUgc2Vjb25kIGNvbnRleHQgd2lsbCBiZSB0aGUgZmlyc3Qgd2VidmlldyBhc1xuICAgICAgLy8gdGhlIGZpcnN0IGlzIGFsd2F5cyBOQVRJVkVfQVBQXG4gICAgICBjb250ZXh0SWQgPSB0aGlzLmNvbnRleHRzWzFdO1xuICAgIH1cbiAgICBpZiAoIV8uaW5jbHVkZXModGhpcy5jb250ZXh0cywgY29udGV4dElkKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hDb250ZXh0RXJyb3IoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgICAgaWYgKHRoaXMucmVtb3RlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VyQ29udGV4dCA9IGNvbnRleHRJZDtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3RlLmNvbm5lY3QoY29udGV4dElkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYGNvbnRleHRJZGAgd2lsbCBiZSBpbiB0aGUgZm9ybSBvZiBgYXBwSWQucGFnZUlkYCBpbiB0aGlzIGNhc2VcbiAgICAgIGxldCBbYXBwSWRLZXksIHBhZ2VJZEtleV0gPSBfLm1hcChjb250ZXh0SWQuc3BsaXQoJy4nKSwgKGlkKSA9PiBwYXJzZUludChpZCwgMTApKTtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3RlLnNlbGVjdFBhZ2UoYXBwSWRLZXksIHBhZ2VJZEtleSwgc2tpcFJlYWR5Q2hlY2spO1xuICAgICAgdGhpcy5jdXJDb250ZXh0ID0gY29udGV4dElkO1xuICAgIH1cbiAgfVxuXG4gIC8vIGF0dGVtcHQgdG8gc3RhcnQgcGVyZm9ybWFuY2UgbG9nZ2luZywgaWYgcmVxdWVzdGVkXG4gIGlmICh0aGlzLm9wdHMuZW5hYmxlUGVyZm9ybWFuY2VMb2dnaW5nICYmIHRoaXMucmVtb3RlKSB7XG4gICAgbG9nZ2VyLmRlYnVnKGBTdGFydGluZyBwZXJmb3JtYW5jZSBsb2cgb24gJyR7dGhpcy5jdXJDb250ZXh0fSdgKTtcbiAgICB0aGlzLmxvZ3MucGVyZm9ybWFuY2UgPSBuZXcgSU9TUGVyZm9ybWFuY2VMb2codGhpcy5yZW1vdGUpO1xuICAgIHRoaXMubG9ncy5wZXJmb3JtYW5jZS5zdGFydENhcHR1cmUoKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0V2luZG93SGFuZGxlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJDb250ZXh0LnRvU3RyaW5nKCk7XG59O1xuXG5jb21tYW5kcy5nZXRXaW5kb3dIYW5kbGVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIGxldCBwYWdlQXJyYXkgPSBhd2FpdCB0aGlzLmxpc3RXZWJGcmFtZXMoKTtcbiAgdGhpcy53aW5kb3dIYW5kbGVDYWNoZSA9IF8ubWFwKHBhZ2VBcnJheSwgdGhpcy5tYXNzYWdlUGFnZSk7XG4gIGxldCBpZEFycmF5ID0gXy5tYXAodGhpcy53aW5kb3dIYW5kbGVDYWNoZSwgJ2lkJyk7XG4gIC8vIHNpbmNlIHdlIHVzZSB0aGlzLmNvbnRleHRzIHRvIG1hbmFnZSBzZWxlY3RpbmcgZGVidWdnZXIgcGFnZXMsIG1ha2VcbiAgLy8gc3VyZSBpdCBnZXRzIHBvcHVsYXRlZCBldmVuIGlmIHNvbWVvbmUgZGlkIG5vdCB1c2UgdGhlXG4gIC8vIGdldENvbnRleHRzIG1ldGhvZFxuICBpZiAoIXRoaXMuY29udGV4dHMpIHtcbiAgICB0aGlzLmNvbnRleHRzID0gaWRBcnJheTtcbiAgfVxuICByZXR1cm4gXy5tYXAoaWRBcnJheSwgKGlkKSA9PiBpZC50b1N0cmluZygpKTtcbn07XG5cbmNvbW1hbmRzLnNldFdpbmRvdyA9IGFzeW5jIGZ1bmN0aW9uIChuYW1lLCBza2lwUmVhZHlDaGVjaykge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIGlmICghXy5pbmNsdWRlcyhfLm1hcCh0aGlzLndpbmRvd0hhbmRsZUNhY2hlLCAnaWQnKSwgbmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaFdpbmRvd0Vycm9yKCk7XG4gIH1cbiAgbGV0IHBhZ2VJZEtleSA9IHBhcnNlSW50KG5hbWUsIDEwKTtcbiAgaWYgKCF0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgYXdhaXQgdGhpcy5yZW1vdGUuc2VsZWN0UGFnZShwYWdlSWRLZXksIHNraXBSZWFkeUNoZWNrKTtcbiAgICB0aGlzLmN1ckNvbnRleHQgPSB0aGlzLmN1cldpbmRvd0hhbmRsZSA9IG5hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG5hbWUgPT09IHRoaXMuY3VyV2luZG93SGFuZGxlKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYFJlbW90ZSBkZWJ1Z2dlciBpcyBhbHJlYWR5IGNvbm5lY3RlZCB0byB3aW5kb3cgJyR7bmFtZX0nYCk7XG4gICAgfSBlbHNlIGlmICghXy5pbmNsdWRlcyhfLm1hcCh0aGlzLndpbmRvd0hhbmRsZUNhY2hlLCAnaWQnKSwgbmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoV2luZG93RXJyb3IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy5yZW1vdGUuZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5jdXJDb250ZXh0ID0gdGhpcy5jdXJXaW5kb3dIYW5kbGUgPSBuYW1lO1xuICAgICAgYXdhaXQgdGhpcy5yZW1vdGUuY29ubmVjdChuYW1lKTtcbiAgICB9XG4gIH1cbn07XG5cbmhlbHBlcnMud2ViQ29udGV4dEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jdXJDb250ZXh0LnJlcGxhY2UoV0VCVklFV19CQVNFLCAnJykgLSAxO1xufTtcblxuZXh0ZW5zaW9ucy5pbml0QXV0b1dlYnZpZXcgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm9wdHMuYXV0b1dlYnZpZXcpIHtcbiAgICBsb2dnZXIuZGVidWcoJ1NldHRpbmcgYXV0byB3ZWJ2aWV3Jyk7XG4gICAgYXdhaXQgdGhpcy5uYXZUb0luaXRpYWxXZWJ2aWV3KHRoaXMpO1xuICB9XG59O1xuXG5leHRlbnNpb25zLmdldENvbnRleHRzQW5kVmlld3MgPSBhc3luYyBmdW5jdGlvbiAodXNlVXJsID0gdHJ1ZSkge1xuICBsb2dnZXIuZGVidWcoJ1JldHJpZXZpbmcgY29udGV4dHMgYW5kIHZpZXdzJyk7XG4gIGxldCB3ZWJ2aWV3cyA9IGF3YWl0IHRoaXMubGlzdFdlYkZyYW1lcyh1c2VVcmwpO1xuICBsZXQgY3R4cyA9IFt7aWQ6IE5BVElWRV9XSU59XTtcbiAgdGhpcy5jb250ZXh0cyA9IFtOQVRJVkVfV0lOXTtcbiAgZm9yIChsZXQgdmlldyBvZiB3ZWJ2aWV3cykge1xuICAgIGN0eHMucHVzaCh7aWQ6IGAke1dFQlZJRVdfQkFTRX0ke3ZpZXcuaWR9YCwgdmlld30pO1xuICAgIHRoaXMuY29udGV4dHMucHVzaCh2aWV3LmlkLnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiBjdHhzO1xufTtcblxuZXh0ZW5zaW9ucy5saXN0V2ViRnJhbWVzID0gYXN5bmMgZnVuY3Rpb24gKHVzZVVybCA9IHRydWUpIHtcbiAgaWYgKCF0aGlzLm9wdHMuYnVuZGxlSWQpIHtcbiAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdygnQ2Fubm90IGVudGVyIHdlYiBmcmFtZSB3aXRob3V0IGEgYnVuZGxlIElEJyk7XG4gIH1cblxuICB1c2VVcmwgPSB1c2VVcmwgJiYgISF0aGlzLmdldEN1cnJlbnRVcmwoKTtcbiAgLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xuICBsb2dnZXIuZGVidWcoYFNlbGVjdGluZyBieSB1cmw6ICR7dXNlVXJsfSAke3VzZVVybCA/IGAoZXhwZWN0ZWQgdXJsOiAnJHt0aGlzLmdldEN1cnJlbnRVcmwoKX0nKWAgOiAnJ31gKTtcbiAgLyoganNoaW50IGlnbm9yZTplbmQgKi9cblxuICBsZXQgY3VycmVudFVybCA9IHVzZVVybCA/IHRoaXMuZ2V0Q3VycmVudFVybCgpIDogdW5kZWZpbmVkO1xuICBsZXQgcGFnZUFycmF5O1xuICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSAmJiB0aGlzLnJlbW90ZSAmJiB0aGlzLm9wdHMuYnVuZGxlSWQpIHtcbiAgICAvLyByZWFsIGRldmljZSwgYW5kIGFscmVhZHkgY29ubmVjdGVkXG4gICAgcGFnZUFycmF5ID0gYXdhaXQgdGhpcy5yZW1vdGUucGFnZUFycmF5RnJvbUpzb24oKTtcbiAgfSBlbHNlIGlmICh0aGlzLnJlbW90ZSAmJiB0aGlzLnJlbW90ZS5hcHBJZEtleSkge1xuICAgIC8vIHNpbXVsYXRvciwgYW5kIGFscmVhZHkgY29ubmVjdGVkXG4gICAgcGFnZUFycmF5ID0gYXdhaXQgdGhpcy5yZW1vdGUuc2VsZWN0QXBwKGN1cnJlbnRVcmwsIHRoaXMub3B0cy53ZWJ2aWV3Q29ubmVjdFJldHJpZXMpO1xuICB9IGVsc2UgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICAvLyByZWFsIGRldmljZSwgYW5kIG5vdCBjb25uZWN0ZWRcbiAgICB0cnkge1xuICAgICAgdGhpcy5yZW1vdGUgPSBuZXcgV2ViS2l0UmVtb3RlRGVidWdnZXIoe1xuICAgICAgICBwb3J0OiB0aGlzLm9wdHMud2Via2l0RGVidWdQcm94eVBvcnQsXG4gICAgICAgIHdlYmtpdFJlc3BvbnNlVGltZW91dDogdGhpcy5vcHRzLndlYmtpdFJlc3BvbnNlVGltZW91dCxcbiAgICAgIH0pO1xuICAgICAgcGFnZUFycmF5ID0gYXdhaXQgdGhpcy5yZW1vdGUucGFnZUFycmF5RnJvbUpzb24oKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGl0IGlzIHJlYXNvbmFibGUgdG8gZXhwZWN0IHRoYXQgdGhpcyBtaWdodCBiZSBjYWxsZWQgd2hlbiB0aGVyZSBpcyBub1xuICAgICAgLy8gd2Via2l0IHJlbW90ZSBkZWJ1Z2dlciB0byBjb25uZWN0IHRvXG4gICAgICBpZiAoIV8uaW5jbHVkZXMoZXJyLm1lc3NhZ2UsICdjb25uZWN0IEVDT05OUkVGVVNFRCcpKSB0aHJvdyBlcnI7XG5cbiAgICAgIGxvZ2dlci53YXJuKCdBdHRlbXB0ZWQgdG8gZ2V0IGEgbGlzdCBvZiB3ZWJ2aWV3IGNvbnRleHRzIGJ1dCBjb3VsZCBub3QgY29ubmVjdCB0byAnICtcbiAgICAgICAgICAgICAgICAgICdpb3Mtd2Via2l0LWRlYnVnLXByb3h5LiBJZiB5b3UgZXhwZWN0IHRvIGZpbmQgd2Vidmlld3MsIHBsZWFzZSBlbnN1cmUgJyArXG4gICAgICAgICAgICAgICAgICAndGhhdCB0aGUgcHJveHkgaXMgcnVubmluZyBhbmQgYWNjZXNzaWJsZScpO1xuICAgICAgdGhpcy5yZW1vdGUgPSBudWxsO1xuICAgICAgcGFnZUFycmF5ID0gW107XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIHNpbXVsYXRvciwgYW5kIG5vdCBjb25uZWN0ZWRcbiAgICB0aGlzLnJlbW90ZSA9IG5ldyBSZW1vdGVEZWJ1Z2dlcih7XG4gICAgICBidW5kbGVJZDogdGhpcy5vcHRzLmJ1bmRsZUlkLFxuICAgICAgdXNlTmV3U2FmYXJpOiB0aGlzLnVzZU5ld1NhZmFyaSgpLFxuICAgICAgcGFnZUxvYWRNczogdGhpcy5wYWdlTG9hZE1zLFxuICAgICAgcGxhdGZvcm1WZXJzaW9uOiB0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uXG4gICAgfSk7XG5cbiAgICBsZXQgYXBwSW5mbyA9IGF3YWl0IHRoaXMucmVtb3RlLmNvbm5lY3QoKTtcbiAgICBpZiAoIWFwcEluZm8pIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIHJlbW90ZSBkZWJ1Z2dlci4nKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcGFnZUFycmF5ID0gYXdhaXQgdGhpcy5yZW1vdGUuc2VsZWN0QXBwKGN1cnJlbnRVcmwsIHRoaXMub3B0cy53ZWJ2aWV3Q29ubmVjdFJldHJpZXMpO1xuICAgIHRoaXMucmVtb3RlLm9uKFJlbW90ZURlYnVnZ2VyLkVWRU5UX1BBR0VfQ0hBTkdFLCB0aGlzLm9uUGFnZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgIGxldCB0cnlDbG9zaW5nQWxlcnQgPSBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgZGlkRGlzbWlzcyA9IGF3YWl0IHRoaXMuY2xvc2VBbGVydEJlZm9yZVRlc3QoKTtcbiAgICAgIGlmICghZGlkRGlzbWlzcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nsb3NlIGFsZXJ0IGZhaWxlZC4gUmV0cnkuJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgzLCA0MDAwLCB0cnlDbG9zaW5nQWxlcnQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gaWYgdGhlIGxvb3AgdG8gY2xvc2UgYWxlcnRzIGZhaWxlZCB0byBkaXNtaXNzLCBpZ25vcmUsXG4gICAgICAvLyBvdGhlcndpc2UgbG9nIGFuZCB0aHJvdyB0aGUgZXJyb3JcbiAgICAgIGlmIChlcnIubWVzc2FnZSAhPT0gJ0Nsb3NlIGFsZXJ0IGZhaWxlZC4gUmV0cnkuJykge1xuICAgICAgICBsb2dnZXIuZXJyb3JBbmRUaHJvdyhlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChwYWdlQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gd2UgaGF2ZSBubyB3ZWIgZnJhbWVzLCBidXQgY29udGludWUgYW55d2F5XG4gICAgbG9nZ2VyLmRlYnVnKCdObyB3ZWIgZnJhbWVzIGZvdW5kLicpO1xuICB9XG4gIHJldHVybiBwYWdlQXJyYXk7XG59O1xuXG5leHRlbnNpb25zLm9uUGFnZUNoYW5nZSA9IGFzeW5jIGZ1bmN0aW9uIChwYWdlQ2hhbmdlTm90aWZpY2F0aW9uKSB7XG4gIGxvZ2dlci5kZWJ1ZyhgUmVtb3RlIGRlYnVnZ2VyIG5vdGlmaWVkIHVzIG9mIGEgbmV3IHBhZ2UgbGlzdGluZzogJHtKU09OLnN0cmluZ2lmeShwYWdlQ2hhbmdlTm90aWZpY2F0aW9uKX1gKTtcbiAgaWYgKHRoaXMuc2VsZWN0aW5nTmV3UGFnZSkge1xuICAgIGxvZ2dlci5kZWJ1ZygnV2UgYXJlIGluIHRoZSBtaWRkbGUgb2Ygc2VsZWN0aW5nIGEgcGFnZSwgaWdub3JpbmcnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF0aGlzLnJlbW90ZS5hcHBJZEtleSkge1xuICAgIGxvZ2dlci5kZWJ1ZygnV2UgaGF2ZSBub3QgeWV0IGNvbm5lY3RlZCwgaWdub3JpbmcnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQge2FwcElkS2V5LCBwYWdlQXJyYXl9ID0gcGFnZUNoYW5nZU5vdGlmaWNhdGlvbjtcblxuICBsZXQgbmV3SWRzID0gW107XG4gIGxldCBuZXdQYWdlcyA9IFtdO1xuICBsZXQga2V5SWQgPSBudWxsO1xuICBmb3IgKGxldCBwYWdlIG9mIHBhZ2VBcnJheSkge1xuICAgIGxldCBpZCA9IHBhZ2UuaWQudG9TdHJpbmcoKTtcbiAgICBuZXdJZHMucHVzaChpZCk7XG4gICAgaWYgKHBhZ2UuaXNLZXkpIHtcbiAgICAgIGtleUlkID0gaWQ7XG4gICAgfVxuICAgIGxldCBjb250ZXh0SWQgPSBgJHthcHBJZEtleX0uJHtpZH1gO1xuICAgIGlmICghXy5pbmNsdWRlcyh0aGlzLmNvbnRleHRzLCBjb250ZXh0SWQpKSB7XG4gICAgICBuZXdQYWdlcy5wdXNoKGlkKTtcbiAgICAgIHRoaXMuY29udGV4dHMucHVzaChjb250ZXh0SWQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICgha2V5SWQpIHtcbiAgICAvLyBpZiB0aGVyZSBpcyBubyBrZXkgaWQsIHB1bGwgdGhlIGZpcnN0IGlkIGZyb20gdGhlIHBhZ2UgYXJyYXkgYW5kIHVzZSB0aGF0XG4gICAgLy8gYXMgYSBzdGFuZCBpblxuICAgIGxvZ2dlci5kZWJ1ZygnTm8ga2V5IGlkIGZvdW5kLiBDaG9vc2luZyBmaXJzdCBpZCBmcm9tIHBhZ2UgYXJyYXknKTtcbiAgICBrZXlJZCA9IG5ld0lkc1swXSB8fCBudWxsO1xuICB9XG5cbiAgbGV0IG5ld1BhZ2UgPSBudWxsO1xuICBpZiAodGhpcy5jdXJDb250ZXh0ID09PSBudWxsKSB7XG4gICAgbG9nZ2VyLmRlYnVnKCdXZSBkbyBub3QgYXBwZWFyIHRvIGhhdmUgd2luZG93IHNldCB5ZXQsIGlnbm9yaW5nJyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IFtjdXJBcHBJZEtleSwgY3VyUGFnZUlkS2V5XSA9IHRoaXMuY3VyQ29udGV4dC5zcGxpdCgnLicpO1xuXG4gICAgaWYgKGN1ckFwcElkS2V5ICE9PSBhcHBJZEtleSkge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdQYWdlIGNoYW5nZSBub3QgcmVmZXJyaW5nIHRvIGN1cnJlbnRseSBzZWxlY3RlZCBhcHAsIGlnbm9yaW5nLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChuZXdQYWdlcy5sZW5ndGgpIHtcbiAgICAgIG5ld1BhZ2UgPSBfLmxhc3QobmV3UGFnZXMpO1xuICAgICAgbG9nZ2VyLmRlYnVnKGBXZSBoYXZlIG5ldyBwYWdlcywgZ29pbmcgdG8gc2VsZWN0IHBhZ2UgJyR7bmV3UGFnZX0nYCk7XG4gICAgfSBlbHNlIGlmICghXy5pbmNsdWRlcyhuZXdJZHMsIGN1clBhZ2VJZEtleSkpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnTmV3IHBhZ2UgbGlzdGluZyBmcm9tIHJlbW90ZSBkZWJ1Z2dlciBkb2VzIG5vdCBjb250YWluICcgK1xuICAgICAgICAgICAgICAgICAgICdjdXJyZW50IHdpbmRvdzsgYXNzdW1pbmcgaXQgaXMgY2xvc2VkJyk7XG4gICAgICBpZiAoa2V5SWQgIT09IG51bGwpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBEZWJ1Z2dlciBhbHJlYWR5IHNlbGVjdGVkIHBhZ2UgJyR7a2V5SWR9JywgYCArXG4gICAgICAgICAgICAgICAgICAgICBgY29uZmlybWluZyB0aGF0IGNob2ljZS5gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci5lcnJvcignRG8gbm90IGhhdmUgb3VyIGN1cnJlbnQgd2luZG93IGFueW1vcmUsIGFuZCB0aGVyZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICdhcmUgbm90IGFueSBtb3JlIHRvIGxvYWQhIERvaW5nIG5vdGhpbmcuLi4nKTtcbiAgICAgICAgdGhpcy5zZXRDdXJyZW50VXJsKHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3VyQ29udGV4dCA9IGAke2FwcElkS2V5fS4ke2tleUlkfWA7XG4gICAgICBuZXdQYWdlID0ga2V5SWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnQ2hlY2tpbmcgaWYgcGFnZSBuZWVkcyB0byBsb2FkJyk7XG4gICAgICAvLyBJZiBhIHdpbmRvdyBuYXZpZ2F0ZXMgdG8gYW4gYW5jaG9yIGl0IGRvZXNuJ3QgYWx3YXlzIGZpcmUgYSBwYWdlXG4gICAgICAvLyBjYWxsYmFjayBldmVudC4gTGV0J3MgY2hlY2sgaWYgd2Ugd291bmQgdXAgaW4gc3VjaCBhIHNpdHVhdGlvbi5cbiAgICAgIGxldCBuZWVkc1BhZ2VMb2FkID0gKCgpID0+IHtcbiAgICAgICAgbGV0IGl0ZW0gPSAoYXJyKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIF8uZmlsdGVyKGFyciwgKG9iaikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pZCA9PT0gdGhpcy5jdXJDb250ZXh0O1xuICAgICAgICAgIH0pWzBdO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIG5lZWQgdG8gbWFwIHRoZSBwYWdlIGlkcyB0byBjb250ZXh0IGlkc1xuICAgICAgICBsZXQgY29udGV4dEFycmF5ID0gXy5tYXAocGFnZUFycmF5LCAoYXJyKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtpZDogYCR7YXBwSWRLZXl9LiR7YXJyLmlkfWB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICFfLmlzRXF1YWwoaXRlbSh0aGlzLmNvbnRleHRzKSwgaXRlbShjb250ZXh0QXJyYXkpKTtcbiAgICAgIH0pKCk7XG5cbiAgICAgIGlmIChuZWVkc1BhZ2VMb2FkKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnUGFnZSBsb2FkIG5lZWRlZC4gTG9hZGluZy4nKTtcbiAgICAgICAgYXdhaXQgdGhpcy5yZW1vdGUucGFnZUxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgbG9nZ2VyLmRlYnVnKCdOZXcgcGFnZSBsaXN0aW5nIGlzIHNhbWUgYXMgb2xkLCBkb2luZyBub3RoaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIHBhZ2UgbGlzdGluZyBpc24ndCBpbmRpY2F0aW5nIGEgcmVkaXJlY3RcbiAgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy5jdXJDb250ZXh0KSkge1xuICAgIGxldCBjdXJyZW50UGFnZUlkID0gcGFyc2VJbnQoXy5sYXN0KHRoaXMuY3VyQ29udGV4dC5zcGxpdCgnLicpKSwgMTApO1xuICAgIGxldCBwYWdlID0gXy5maW5kKHBhZ2VBcnJheSwgKHApID0+IHBhcnNlSW50KHAuaWQsIDEwKSA9PT0gY3VycmVudFBhZ2VJZCk7XG4gICAgaWYgKHBhZ2UgJiYgcGFnZS51cmwgIT09IHRoaXMuZ2V0Q3VycmVudFVybCgpKSB7XG4gICAgICBsb2dnZXIuZGVidWcoYFJlZGlyZWN0ZWQgZnJvbSAnJHt0aGlzLmdldEN1cnJlbnRVcmwoKX0nIHRvICcke3BhZ2UudXJsfSdgKTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFVybChwYWdlLnVybCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHV0aWwuaGFzVmFsdWUobmV3UGFnZSkpIHtcbiAgICB0aGlzLnNlbGVjdGluZ05ld1BhZ2UgPSB0cnVlO1xuICAgIGF3YWl0IHRoaXMucmVtb3RlLnNlbGVjdFBhZ2UoYXBwSWRLZXksIHBhcnNlSW50KG5ld1BhZ2UsIDEwKSk7XG4gICAgdGhpcy5zZWxlY3RpbmdOZXdQYWdlID0gZmFsc2U7XG4gICAgdGhpcy5jdXJDb250ZXh0ID0gYCR7YXBwSWRLZXl9LiR7bmV3UGFnZX1gO1xuICB9XG4gIHRoaXMud2luZG93SGFuZGxlQ2FjaGUgPSBfLm1hcChwYWdlQXJyYXksIHRoaXMubWFzc2FnZVBhZ2UpO1xufTtcblxuZXh0ZW5zaW9ucy5nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlID0gYXN5bmMgZnVuY3Rpb24gKHJlZ0V4cCkge1xuICBsZXQgY29udGV4dHMgPSBhd2FpdCB0aGlzLmdldENvbnRleHRzQW5kVmlld3MoKTtcbiAgbGV0IG1hdGNoaW5nQ3R4O1xuICBmb3IgKGxldCBjdHggb2YgY29udGV4dHMpIHtcbiAgICBpZiAoY3R4LnZpZXcgJiYgKChjdHgudmlldy50aXRsZSB8fCAnJykubWF0Y2gocmVnRXhwKSB8fCAoY3R4LnZpZXcudXJsIHx8ICcnKS5tYXRjaChyZWdFeHApKSkge1xuICAgICAgaWYgKGN0eC52aWV3LnVybCAhPT0gJ2Fib3V0OmJsYW5rJykge1xuICAgICAgICBtYXRjaGluZ0N0eCA9IGN0eDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluIHRoZSBjYXNlcyBvZiBYY29kZSA8IDUgKGkuZS4sIGlPUyBTREsgVmVyc2lvbiBsZXNzIHRoYW4gNylcbiAgICAgICAgLy8gaU9TIDcuMSwgaU9TIDkuMCAmIGlPUyA5LjEgaW4gYSB3ZWJ2aWV3IChub3QgaW4gU2FmYXJpKVxuICAgICAgICAvLyB3ZSBjYW4gaGF2ZSB0aGUgdXJsIGJlIGBhYm91dDpibGFua2BcbiAgICAgICAgaWYgKHBhcnNlRmxvYXQodGhpcy5pb3NTZGtWZXJzaW9uKSA8IDcgfHwgcGFyc2VGbG9hdCh0aGlzLmlvc1Nka1ZlcnNpb24pID49IDkgfHxcbiAgICAgICAgICAgICh0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uID09PSAnNy4xJyAmJiB0aGlzLm9wdHMuYXBwICYmIHRoaXMub3B0cy5hcHAudG9Mb3dlckNhc2UoKSAhPT0gJ3NhZmFyaScpKSB7XG4gICAgICAgICAgbWF0Y2hpbmdDdHggPSBjdHg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWF0Y2hpbmdDdHggPyBtYXRjaGluZ0N0eC5pZCA6IHVuZGVmaW5lZDtcbn07XG5cbi8vIFJpZ2h0IG5vdyB3ZSBkb24ndCBuZWNlc3NhcmlseSB3YWl0IGZvciB3ZWJ2aWV3XG4vLyBhbmQgZnJhbWUgdG8gbG9hZCwgd2hpY2ggbGVhZHMgdG8gcmFjZSBjb25kaXRpb25zIGFuZCBmbGFraW5lc3MsXG4vLyBsZXQncyBzZWUgaWYgd2UgY2FuIHRyYW5zaXRpb24gdG8gc29tZXRoaW5nIGJldHRlclxuZXh0ZW5zaW9ucy51c2VOZXdTYWZhcmkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuaW9zU2RrVmVyc2lvbikgPj0gOC4xICYmXG4gICAgICAgICBwYXJzZUZsb2F0KHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24pID49IDguMSAmJlxuICAgICAgICAgIXRoaXMuaXNSZWFsRGV2aWNlKCkgJiZcbiAgICAgICAgIHRoaXMub3B0cy5zYWZhcmk7XG59O1xuXG5leHRlbnNpb25zLm5hdlRvSW5pdGlhbFdlYnZpZXcgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCB0aW1lb3V0ID0gMDtcbiAgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICB0aW1lb3V0ID0gMzAwMDtcbiAgICBsb2dnZXIuZGVidWcoYFdhaXRpbmcgZm9yICR7dGltZW91dH0gbXMgYmVmb3JlIG5hdmlnYXRpbmcgdG8gdmlldy5gKTtcbiAgfVxuICBhd2FpdCBCLmRlbGF5KHRpbWVvdXQpO1xuICBpZiAodGhpcy51c2VOZXdTYWZhcmkoKSkge1xuICAgIGF3YWl0IHRoaXMudHlwZUFuZE5hdlRvVXJsKCk7XG4gIH0gZWxzZSBpZiAocGFyc2VJbnQodGhpcy5pb3NTZGtWZXJzaW9uLCAxMCkgPj0gNyAmJiAhdGhpcy5pc1JlYWxEZXZpY2UoKSAmJiB0aGlzLm9wdHMuc2FmYXJpKSB7XG4gICAgYXdhaXQgdGhpcy5uYXZUb1ZpZXdUaHJvdWdoRmF2b3JpdGVzKCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgdGhpcy5uYXZUb1ZpZXdXaXRoVGl0bGUoLy4qLyk7XG4gIH1cbn07XG5cbmFzeW5jIGZ1bmN0aW9uIG9wZW5OZXdQYWdlICgpIHtcbiAgbGV0IG5ld1BhZ2VCdXR0b24gPSBhd2FpdCB0aGlzLmZpbmRFbGVtZW50KCd4cGF0aCcsIFwiLy9VSUFCdXR0b25bY29udGFpbnMoQG5hbWUsJ05ldyBwYWdlJyldXCIpO1xuICBhd2FpdCB0aGlzLm5hdGl2ZVRhcChuZXdQYWdlQnV0dG9uLkVMRU1FTlQpO1xufVxuXG5leHRlbnNpb25zLnR5cGVBbmROYXZUb1VybCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGFkZHJlc3MgPSB0aGlzLm9wdHMuYWRkcmVzcyA/IHRoaXMub3B0cy5hZGRyZXNzIDogJzEyNy4wLjAuMSc7XG4gIHRoaXMuc2V0Q3VycmVudFVybCh0aGlzLmNhcHMuc2FmYXJpSW5pdGlhbFVybCB8fCBgaHR0cDovLyR7YWRkcmVzc306JHt0aGlzLm9wdHMucG9ydH0vd2VsY29tZWApO1xuXG4gIGxldCB0cmllcyA9IDA7XG4gIGNvbnN0IE1BWF9UUklFUyA9IDI7XG4gIGxldCBuYXZpZ2F0ZSA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgb2xkSW1wV2FpdCA9IHRoaXMuaW1wbGljaXRXYWl0TXM7XG4gICAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IDcwMDA7XG5cbiAgICAvLyBmaW5kIHRoZSB1cmwgYmFyLCBhbmQgdGFwIG9uIGl0LiByZXRyeSB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgdHJ5XG4gICAgLy8gdG9vIHNvb24gd2hpbGUgdGhlIHZpZXcgaXMgc3RpbGwgbG9hZGluZ1xuICAgIGxldCBlbCA9IGF3YWl0IHJldHJ5SW50ZXJ2YWwoMywgMTAwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsZW1lbnQoJ2FjY2Vzc2liaWxpdHkgaWQnLCAnVVJMJyk7XG4gICAgfSk7XG4gICAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IG9sZEltcFdhaXQ7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5uYXRpdmVUYXAoZWwuRUxFTUVOVCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoXy5pbmNsdWRlcyhlcnIubWVzc2FnZSwgJ2NvdWxkIG5vdCBiZSB0YXBwZWQnKSkge1xuICAgICAgICBpZiAodHJpZXMrKyA+PSBNQVhfVFJJRVMpIHRocm93IGVycjtcblxuICAgICAgICAvLyBnZW5lcmFsbHkgdGhpcyBtZWFucyB0aGF0IFNhZmFyaSBpcyBpbiBwYWdlIHZpZXdpbmcgbW9kZVxuICAgICAgICAvLyBzbyB0cnkgdG8gb3BlbiBhIG5ldyBwYWdlIGFuZCB0aGVuIHJlZG8gdGhlIG5hdmlnYXRpb25cbiAgICAgICAgYXdhaXQgb3Blbk5ld1BhZ2UoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5hdmlnYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZ2V0IHRoZSBsYXN0IGFkZHJlc3MgZWxlbWVudCBhbmQgc2V0IHRoZSB1cmxcbiAgICB0cnkge1xuICAgICAgbGV0IGVsID0gYXdhaXQgdGhpcy5maW5kRWxlbWVudCgnY2xhc3MgbmFtZScsICdVSUFUZXh0RmllbGQnKTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0VmFsdWVJbW1lZGlhdGUodGhpcy5nZXRDdXJyZW50VXJsKCksIGVsKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIHRoaXMgaXMgZmxha2V5IG9uIGNlcnRhaW4gc3lzdGVtcyBzbyB3ZSByZXRyeSB1bnRpbCB3ZSBnZXQgc29tZXRoaW5nXG4gICAgICAvLyBpb3Mgc2ltczogc2FmYXJpIG9wZW5zIGJ1dCB0aGUgdGV4dCBmaWVsZCBjYW4ndCBiZSBmb3VuZFxuICAgICAgaWYgKHRyaWVzKysgPj0gTUFYX1RSSUVTKSB0aHJvdyBlcnI7XG4gICAgICByZXR1cm4gYXdhaXQgbmF2aWdhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIGl0IGhhcHBlblxuICAgIHRyeSB7XG4gICAgICBlbCA9IGF3YWl0IHRoaXMuZmluZEVsZW1lbnQoJ2FjY2Vzc2liaWxpdHkgaWQnLCAnR28nKTtcbiAgICAgIGF3YWl0IHRoaXMubmF0aXZlVGFwKGVsLkVMRU1FTlQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKF8uaW5jbHVkZXMoZXJyLm1lc3NhZ2UsICdjb3VsZCBub3QgYmUgdGFwcGVkJykpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdVbmFibGUgdG8gc3VibWl0IFVSTCBiZWNhdXNlIFxcJ0dvXFwnIGJ1dHRvbiBjb3VsZCBub3QgYmUgdGFwcGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICdQbGVhc2UgbWFrZSBzdXJlIHlvdXIga2V5Ym9hcmQgaXMgdG9nZ2xlZCBvbi4nKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5uYXZUb1ZpZXdXaXRoVGl0bGUodW5kZWZpbmVkLCBuZXcgUmVnRXhwKHRoaXMuZ2V0Q3VycmVudFVybCgpLCAnaScpKTtcblxuICAgIC8vIHdhaXQgZm9yIHBhZ2UgdG8gZmluaXNoIGxvYWRpbmcuXG4gICAgYXdhaXQgdGhpcy5yZW1vdGUucGFnZVVubG9hZCgpO1xuICB9O1xuICBhd2FpdCBuYXZpZ2F0ZSgpO1xufTtcblxuZXh0ZW5zaW9ucy5uYXZUb1ZpZXdUaHJvdWdoRmF2b3JpdGVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2dnZXIuZGVidWcoJ1dlIGFyZSBvbiBpT1M3KyBzaW11bGF0b3I6IGNsaWNraW5nIGFwcGxlIGJ1dHRvbiB0byBnZXQgaW50byBhIHdlYnZpZXcnKTtcbiAgbGV0IG9sZEltcFdhaXQgPSB0aGlzLmltcGxpY2l0V2FpdE1zO1xuICB0aGlzLmltcGxpY2l0V2FpdE1zID0gNzAwMDsgLy8gd2FpdCA3cyBmb3IgYXBwbGUgYnV0dG9uIHRvIGV4aXN0XG5cbiAgbGV0IGVsO1xuICB0cnkge1xuICAgIGVsID0gYXdhaXQgdGhpcy5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFTY3JvbGxWaWV3WzFdL1VJQUJ1dHRvblsxXScpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsZXQgbXNnID0gJ0NvdWxkIG5vdCBmaW5kIGJ1dHRvbiB0byBjbGljayB0byBnZXQgaW50byB3ZWJ2aWV3LiAnICtcbiAgICAgICAgICAgICAgJ1Byb2NlZWRpbmcgb24gdGhlIGFzc3VtcHRpb24gd2UgaGF2ZSBhIHdvcmtpbmcgb25lLic7XG4gICAgbG9nZ2VyLmVycm9yKG1zZyk7XG4gICAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IG9sZEltcFdhaXQ7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMubmF2VG9WaWV3V2l0aFRpdGxlKC8uKi9pKTtcbiAgfVxuICB0aGlzLmltcGxpY2l0V2FpdE1zID0gb2xkSW1wV2FpdDtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLm5hdGl2ZVRhcChlbC5FTEVNRU5UKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbGV0IG1zZyA9ICdDb3VsZCBub3QgY2xpY2sgYnV0dG9uIHRvIGdldCBpbnRvIHdlYnZpZXcuICcgK1xuICAgICAgICAgICAgICAnUHJvY2VlZGluZyBvbiB0aGUgYXNzdW1wdGlvbiB3ZSBoYXZlIGEgd29ya2luZyBvbmUuJztcbiAgICBsb2dnZXIuZXJyb3IobXNnKTtcbiAgfVxuICBhd2FpdCB0aGlzLm5hdlRvVmlld1dpdGhUaXRsZSgvYXBwbGUvaSk7XG59O1xuXG5leHRlbnNpb25zLm5hdlRvVmlld1dpdGhUaXRsZSA9IGFzeW5jIGZ1bmN0aW9uICh0aXRsZVJlZ2V4LCB1cmxSZWdFeHApIHtcbiAgbG9nZ2VyLmRlYnVnKCdOYXZpZ2F0aW5nIHRvIG1vc3QgcmVjZW50bHkgb3BlbmVkIHdlYnZpZXcnKTtcbiAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgbGV0IHNwaW5UaW1lID0gNTAwO1xuICBsZXQgc3BpbkhhbmRsZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gYXdhaXQgdGhpcy5nZXRMYXRlc3RXZWJ2aWV3Q29udGV4dEZvclRpdGxlKHRpdGxlUmVnZXggfHwgdXJsUmVnRXhwKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5pbmRleE9mKCdDb3VsZCBub3QgY29ubmVjdCB0byBhIHZhbGlkIGFwcCBhZnRlcicpID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBuYXZpZ2F0ZSB0byB3ZWJ2aWV3ISBFcnI6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgICBsb2dnZXIuZGVidWcoJ0NvdWxkIG5vdCBuYXZpZ2F0ZSB0byB3ZWJ2aWV3LiBSZXRyeWluZyBpZiBwb3NzaWJsZS4nKTtcbiAgICB9XG4gICAgaWYgKHJlcykge1xuICAgICAgbGV0IGxhdGVzdFdpbmRvdyA9IHJlcztcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgUGlja2luZyB3ZWJ2aWV3ICcke2xhdGVzdFdpbmRvd30nYCk7XG4gICAgICBhd2FpdCB0aGlzLnNldENvbnRleHQobGF0ZXN0V2luZG93KTtcbiAgICAgIGF3YWl0IHRoaXMucmVtb3RlLmNhbmNlbFBhZ2VMb2FkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gbm8gd2VidmlldyB3YXMgZm91bmRcbiAgICBpZiAoKERhdGUubm93KCkgLSBzdGFydCkgPj0gOTAwMDApIHtcbiAgICAgIC8vIHRvbyBzbG93LCBnZXQgb3V0XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBuYXZpZ2F0ZSB0byB3ZWJ2aWV3OyB0aGVyZSBhcmUgbm9uZSEnKTtcbiAgICB9XG5cbiAgICBsb2dnZXIud2FybihcIkNvdWxkIG5vdCBmaW5kIGFueSB3ZWJ2aWV3cyB5ZXQsIHJlZnJlc2hpbmcvcmV0cnlpbmdcIik7XG4gICAgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkgfHwgIXRoaXMub3B0cy5zYWZhcmkpIHtcbiAgICAgIC8vIG9uIGEgcmVhbCBkZXZpY2UsIHdoZW4gbm90IHVzaW5nIFNhZmFyaSwgd2UganVzdCB3YW50IHRvIHRyeSBhZ2FpblxuICAgICAgYXdhaXQgQi5kZWxheShzcGluVGltZSk7XG4gICAgICByZXR1cm4gYXdhaXQgc3BpbkhhbmRsZXMoKTtcbiAgICB9XG5cbiAgICAvLyBmaW5kIHRoZSByZWxvYWQgYnV0dG9uIGFuZCB0YXAgaXQsIGlmIHBvc3NpYmxlXG4gICAgbGV0IGVsZW1lbnQ7XG4gICAgdHJ5IHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnRmluZGluZyBhbmQgdGFwcGluZyByZWxvYWQgYnV0dG9uJyk7XG4gICAgICBlbGVtZW50ID0gYXdhaXQgdGhpcy5maW5kVUlFbGVtZW50T3JFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsICdSZWxvYWRCdXR0b24nLCAnJywgZmFsc2UpO1xuICAgICAgYXdhaXQgdGhpcy5uYXRpdmVUYXAoZWxlbWVudC5FTEVNRU5UKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci53YXJuKGBFcnJvciBmaW5kaW5nIGFuZCB0YXBwaW5nIHJlbG9hZCBidXR0b246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICBsb2dnZXIud2FybignUmV0cnlpbmcuJyk7XG4gICAgICBhd2FpdCBCLmRlbGF5KHNwaW5UaW1lKTtcbiAgICB9XG5cbiAgICAvLyB0cnkgaXQgYWxsIGFnYWluXG4gICAgcmV0dXJuIGF3YWl0IHNwaW5IYW5kbGVzKCk7XG4gIH07XG4gIGF3YWl0IHNwaW5IYW5kbGVzKCk7XG59O1xuXG5oZWxwZXJzLmNsb3NlQWxlcnRCZWZvcmVUZXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQgcHJlc2VudCA9IGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKCdhdS5hbGVydElzUHJlc2VudCgpJyk7XG4gIGlmICghcHJlc2VudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxvZ2dlci5kZWJ1ZygnQWxlcnQgcHJlc2VudCBiZWZvcmUgc3RhcnRpbmcgdGVzdCwgbGV0IHVzIGJhbmlzaCBpdCcpO1xuICBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZCgnYXUuZGlzbWlzc0FsZXJ0KCknKTtcbiAgbG9nZ2VyLmRlYnVnKCdBbGVydCBiYW5pc2hlZCEnKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5oZWxwZXJzLnN0b3BSZW1vdGUgPSBhc3luYyBmdW5jdGlvbiAoY2xvc2VXaW5kb3dCZWZvcmVEaXNjb25uZWN0aW5nID0gZmFsc2UpIHtcbiAgaWYgKCF0aGlzLnJlbW90ZSkge1xuICAgIGxvZ2dlci5lcnJvckFuZFRocm93KCdUcmllZCB0byBsZWF2ZSBhIHdlYiBmcmFtZSBidXQgd2VyZSBub3QgaW4gb25lJyk7XG4gIH1cblxuICBpZiAoY2xvc2VXaW5kb3dCZWZvcmVEaXNjb25uZWN0aW5nKSB7XG4gICAgYXdhaXQgdGhpcy5jbG9zZVdpbmRvdygpO1xuICB9XG4gIGF3YWl0IHRoaXMucmVtb3RlLmRpc2Nvbm5lY3QoKTtcbiAgdGhpcy5jdXJDb250ZXh0ID0gbnVsbDtcbiAgdGhpcy5jdXJXZWJGcmFtZXMgPSBbXTtcbiAgdGhpcy5jdXJXZWJDb29yZHMgPSBudWxsO1xuICB0aGlzLnJlbW90ZSA9IG51bGw7XG59O1xuXG5oZWxwZXJzLmlzV2ViQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5jdXJDb250ZXh0ICYmIHRoaXMuY3VyQ29udGV4dCAhPT0gTkFUSVZFX1dJTjtcbn07XG5cbmhlbHBlcnMuc2V0Q3VycmVudFVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgdGhpcy5fY3VycmVudFVybCA9IHVybDtcbn07XG5cbmhlbHBlcnMuZ2V0Q3VycmVudFVybCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2N1cnJlbnRVcmw7XG59O1xuXG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMsIE5BVElWRV9XSU4sIFdFQlZJRVdfV0lOLCBXRUJWSUVXX0JBU0UgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
